#include "main.h"
#include "acs_input.hpp"
#include "hil.hpp"

using namespace control;

/*
 ******************************************************************************
 * DEFINES
 ******************************************************************************
 */

/*
 ******************************************************************************
 * EXTERNS
 ******************************************************************************
 */

/*
 ******************************************************************************
 * PROTOTYPES
 ******************************************************************************
 */

/*
 ******************************************************************************
 * GLOBAL VARIABLES
 ******************************************************************************
 */

/*
 ******************************************************************************
 ******************************************************************************
 * LOCAL FUNCTIONS
 ******************************************************************************
 ******************************************************************************
 */

/*
 ******************************************************************************
 * EXPORTED FUNCTIONS
 ******************************************************************************
 */

/**
 *
 */
HIL::HIL(void) {

}

/**
 *
 */
void HIL::update(ACSInput &acs_in) {

  for (size_t i=0; i<ACS_INPUT_ENUM_END; i++) {
    if (1 == bmp[i]) {
      acs_in.ch[i] = this->shadow.ch[i];
    }
  }
}

/**
 *
 */
void HIL::disableAll(void) {
  bmp.reset();
}

/**
 *
 */
void HIL::override(double val, state_vector_enum addr) {
  osalDbgCheck(addr < ACS_INPUT_ENUM_END);

  shadow.ch[addr] = val;
  bmp.set(addr);
}

/**
 *
 */
void HIL::disable(state_vector_enum addr) {
  osalDbgCheck(addr < ACS_INPUT_ENUM_END);

  bmp.reset(addr);
}
